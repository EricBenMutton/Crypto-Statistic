import { ExchangeFactory } from '../exchanges/factory';
import { AccountBalance, ExchangeBalance } from '../types/exchange';
import { updateTable } from '../feishu';
import { ExchangeName } from '../types/config';
import { loadConfig } from '../config';

interface TotalBalance {
    [exchange: string]: AccountBalance;
}

async function getExchangeBalance(exchange: ExchangeBalance): Promise<AccountBalance> {
    const spot = await exchange.getSpotBalance();
    const futures = await exchange.getFuturesBalance();

    return {
        spot,
        ...(Object.keys(futures).length > 0 ? { futures } : {})
    };
}

export async function checkAllExchangesBalance() {
    // Ëé∑ÂèñÊâÄÊúâ‰∫§ÊòìÊâÄÁöÑ‰ΩôÈ¢ù
    const balances: TotalBalance = {};
    for (const [name, exchange] of ExchangeFactory.getAllExchanges()) {
        const balance = await getExchangeBalance(exchange);
        if (Object.keys(balance.spot).length > 0 || (balance.futures && Object.keys(balance.futures).length > 0)) {
            balances[name] = balance;
        }
    }

    // ÊòæÁ§∫‰ΩôÈ¢ù
    let totalSpot = 0;
    let totalFutures = 0;

    const exchangeTotalMap = new Map<string, number>();

    console.log('\nÂêÑ‰∫§ÊòìÊâÄË¥¶Êà∑‰ΩôÈ¢ù:');
    for (const [exchangeName, balance] of Object.entries(balances)) {
        console.log(`\nüí∞üí∞üí∞üí∞üí∞üí∞üí∞üí∞üí∞üí∞ ${exchangeName.toUpperCase()} üí∞üí∞üí∞üí∞üí∞üí∞üí∞üí∞üí∞üí∞`);

        // ÊòæÁ§∫Áé∞Ë¥ßË¥¶Êà∑‰ΩôÈ¢ù
        console.log('Áé∞Ë¥ßË¥¶Êà∑:');
        for (const [currency, amount] of Object.entries(balance.spot)) {
            console.log(`  ${currency}: ${amount}`);
        }

        // ÊòæÁ§∫ÂêàÁ∫¶Ë¥¶Êà∑‰ΩôÈ¢ù
        if (balance.futures && Object.keys(balance.futures).length > 0) {
            console.log('\nÂêàÁ∫¶Ë¥¶Êà∑:');
            for (const [currency, amount] of Object.entries(balance.futures)) {
                console.log(`  ${currency}: ${amount}`);
            }
        }

        const exchange = ExchangeFactory.getExchange(exchangeName as ExchangeName);
        if (exchange) {
            const value = await exchange.calculateTotalValueInUsdt(balance);
            totalSpot += value.spot;
            totalFutures += value.futures;

            console.log('\n USDT/USD ËÆ°‰ª∑:');
            console.log(`  Áé∞Ë¥ßË¥¶Êà∑: ${value.spot.toFixed(2)}`);
            console.log(`  ÂêàÁ∫¶Ë¥¶Êà∑: ${value.futures.toFixed(2)}`);
            console.log(`  ÊÄªËÆ°: ${(value.spot + value.futures).toFixed(2)}`);

            exchangeTotalMap.set(exchangeName, value.spot + value.futures);
        }
    }

    // ÊòæÁ§∫ÊÄª‰ª∑ÂÄº
    console.log('\nÊÄªËµÑ‰∫ß‰ª∑ÂÄº(USDT):');
    console.log(`  ÊÄªËÆ°: ${(totalSpot + totalFutures).toFixed(2)}`);

    // Êõ¥Êñ∞È£û‰π¶Ë°®Ê†º
    await updateTable(exchangeTotalMap);

    return {
        totalSpot,
        totalFutures,
        total: totalSpot + totalFutures,
        exchangeTotals: Object.fromEntries(exchangeTotalMap)
    };
}

// Â¶ÇÊûúÁõ¥Êé•ËøêË°åÊñá‰ª∂ÔºåÂàôÊâßË°å checkAllExchangesBalance
if (require.main === module) {
    // Âä†ËΩΩÈÖçÁΩÆÂπ∂ÂàùÂßãÂåñ‰∫§ÊòìÊâÄ
    const config = loadConfig();
    Object.entries(config).forEach(([name, credentials]) => {
        ExchangeFactory.createExchange(name as ExchangeName, credentials);
        console.log(`Â∑≤ÈÖçÁΩÆ ${name.toUpperCase()} ‰∫§ÊòìÊâÄ`);
    });

    checkAllExchangesBalance().catch(console.error);
} 